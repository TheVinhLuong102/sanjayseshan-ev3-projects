# Echo server program
import time
import os
import socket
import threading
import struct

locations = {"none": (0,0), "black": (0,0), "blue" : (0,0),"green": (0,0),"yellow": (0,0),"red": (0,0),"white": (0,0), "brown": (0,0)}
set = [0]*6
scores = {"red":0, "green":0, "pacman":0}
tile_addr = ["10.42.0.1", "10.42.1.1", "10.42.2.1", "10.42.3.1", "10.42.4.1", "10.42.5.1"]
loc = 'green:(0,0)'

class ThreadedServer(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
	print port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.host, self.port))

    def listen(self):
        self.sock.listen(5)
        while True:
            conn, addresstup = self.sock.accept()
            conn.settimeout(60)
	    address, tmp = addresstup
            print "addr: " + str(address)
            if address in tile_addr:
                threading.Thread(target = self.handleTile,args = (conn,address)).start()
            else:
                threading.Thread(target = self.handleGhost,args = (conn,address)).start()

    def handleTile(self, client, address):
        print "HANDLE TILE"
        size = 1024
        id = int(address.split(".")[2])
        while True:
            try:
                data = ''
#                print " receiving " + str(struct.calcsize("!I")) + " bytes"
                data_len_str= client.recv( struct.calcsize("!I") )
#                print " received " + str(len(data_len_str)) + " bytes"
                print data_len_str[0]
                data_len = (struct.unpack("!I", data_len_str))[0]
#                print " receiving " + str(data_len) + " bytes"
                while (data_len > 0):
                    data += client.recv( data_len )
                    data_len -= len(data)
#                    print " receiving " + str(data_len) + " more bytes"
#                data = client.recv(size)
		print data + " " + address + " Tile"
                if data:
                    # Set the response to echo back the recieved data
#                    response = data
#                    client.send(response)
                    score = data.split(';')[0]
                    set[id] = int(score)
                    loc = data.split(';')[1]
                    #  time.sleep(1)
                    # print line
                    color = loc.split(':')[0]
                    coord = loc.split(':')[1].split('\n')[0]
                    locations[color] = eval(coord)
                    # print locations
                    scores["pacman"] = sum(set)
                    print str(locations) + ";" + str(scores["pacman"]) + ";" + str(scores["red"]) + ";" + str(scores["green"])
                else:
                    raise error('Tile disconnected')
            except Exception as e:
                print "TileHandler Exception"
                print str(e.args)
                #client.close()
                return False


    def handleGhost(self, client, address):
        size = 1024
        print "HANDLE GHOST"
        while True:
            try:
                data = client.recv(size)
		print data + " " + address + " Ghost"
                if data:
                    # Set the response to echo back the recieved data
                    response = data
                    client.send(response)
                    score = data.split(';')[0]
                    if address== '192.168.0.1':
                      scores["red"] = int(score)
                    if address== '192.168.0.5':
                      scores["green"] = int(score)
                    #  time.sleep(1)
                    # print line
                    print str(locations) + ";" + str(scores["pacman"]) + ";" + str(scores["red"]) + ";" + str(scores["green"])
                else:
                    raise error('Tile disconnected')
            except:
                #client.close()
                return False

if __name__ == "__main__":
    threading.Thread(target = ThreadedServer('',5000).listen()).start()
    threading.Thread(target = ThreadedServer('',6000).listen()).start()
#    ThreadedServer('',6000).listen()


